
use('authenticationDB');



db.runCommand({collMod:'users',
    validator:{
        $jsonSchema:{
            bsonType:'object',
            title:"users schema validation",
            required:["name","email","password"],
            description:'name, email and password are required',
            properties:{
               name:{
                 bsonType:"string",
                 description:"must be of type string and is required",
                 minLength:3,
                 maxLength:50
               },
               email:{
                bsonType:"string",
                description:"must be of type string and is required",
                pattern:'^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\.([a-zA-Z]{2,})$'
               
               },
               password:{
                bsonType:"string",
                description:"must be of type string and is required"
               },
               role:{
                enum:['admin','manager','user'],
                description:'Valid roles are admin manager or user '
               },
               verificationToken:{
                bsonType:'string',
               },
               isVerified:{
                bsonType:'bool',
                //cant add a default value
               },
               passwordTokenExpirationDate:{
                bsonType:'date'
               }

            }
        }
    }
})

db.getCollectionInfos( { name: "users" } )[0].options.validator



// db.users.createIndex({email:1},{unique:true})
// db.users.dropIndex({email:1});


// db.users.aggregate([{$group:{_id:"$email",all:{$push:"$$ROOT"}}},{

// $project: {
//   all:{$slice:["$all",1]}
// }},{
// $unwind: {
//   path: "$all"
// }},{$project:{name:"$all.name",email:"$all.email",password:"$all.password",_id:"$all._id"}},{$out:'users'}])


// db.users.createIndex({email:1})

